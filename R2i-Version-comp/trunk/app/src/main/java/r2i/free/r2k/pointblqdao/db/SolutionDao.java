package r2i.free.r2k.pointblqdao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import r2i.free.r2k.pointblqdao.db.Solution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOLUTION".
*/
public class SolutionDao extends AbstractDao<Solution, Long> {

    public static final String TABLENAME = "SOLUTION";

    /**
     * Properties of entity Solution.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Aigui_compr = new Property(1, Integer.class, "aigui_compr", false, "AIGUI_COMPR");
        public final static Property Aigui_aigui = new Property(2, Integer.class, "aigui_aigui", false, "AIGUI_AIGUI");
        public final static Property Aigui_cann = new Property(3, Integer.class, "aigui_cann", false, "AIGUI_CANN");
        public final static Property Hydro = new Property(4, Integer.class, "hydro", false, "HYDRO");
        public final static Property Change_parc = new Property(5, Integer.class, "change_parc", false, "CHANGE_PARC");
        public final static Property Fouill_ponct = new Property(6, Integer.class, "fouill_ponct", false, "FOUILL_PONCT");
        public final static Property Genie_civi = new Property(7, Integer.class, "genie_civi", false, "GENIE_CIVI");
        public final static Property Nego = new Property(8, Integer.class, "nego", false, "NEGO");
        public final static Property Accomp_free = new Property(9, Integer.class, "accomp_free", false, "ACCOMP_FREE");
    };


    public SolutionDao(DaoConfig config) {
        super(config);
    }
    
    public SolutionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOLUTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AIGUI_COMPR\" INTEGER," + // 1: aigui_compr
                "\"AIGUI_AIGUI\" INTEGER," + // 2: aigui_aigui
                "\"AIGUI_CANN\" INTEGER," + // 3: aigui_cann
                "\"HYDRO\" INTEGER," + // 4: hydro
                "\"CHANGE_PARC\" INTEGER," + // 5: change_parc
                "\"FOUILL_PONCT\" INTEGER," + // 6: fouill_ponct
                "\"GENIE_CIVI\" INTEGER," + // 7: genie_civi
                "\"NEGO\" INTEGER," + // 8: nego
                "\"ACCOMP_FREE\" INTEGER);"); // 9: accomp_free
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOLUTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Solution entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer aigui_compr = entity.getAigui_compr();
        if (aigui_compr != null) {
            stmt.bindLong(2, aigui_compr);
        }
 
        Integer aigui_aigui = entity.getAigui_aigui();
        if (aigui_aigui != null) {
            stmt.bindLong(3, aigui_aigui);
        }
 
        Integer aigui_cann = entity.getAigui_cann();
        if (aigui_cann != null) {
            stmt.bindLong(4, aigui_cann);
        }
 
        Integer hydro = entity.getHydro();
        if (hydro != null) {
            stmt.bindLong(5, hydro);
        }
 
        Integer change_parc = entity.getChange_parc();
        if (change_parc != null) {
            stmt.bindLong(6, change_parc);
        }
 
        Integer fouill_ponct = entity.getFouill_ponct();
        if (fouill_ponct != null) {
            stmt.bindLong(7, fouill_ponct);
        }
 
        Integer genie_civi = entity.getGenie_civi();
        if (genie_civi != null) {
            stmt.bindLong(8, genie_civi);
        }
 
        Integer nego = entity.getNego();
        if (nego != null) {
            stmt.bindLong(9, nego);
        }
 
        Integer accomp_free = entity.getAccomp_free();
        if (accomp_free != null) {
            stmt.bindLong(10, accomp_free);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Solution readEntity(Cursor cursor, int offset) {
        Solution entity = new Solution( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // aigui_compr
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // aigui_aigui
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // aigui_cann
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // hydro
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // change_parc
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // fouill_ponct
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // genie_civi
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // nego
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // accomp_free
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Solution entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAigui_compr(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAigui_aigui(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAigui_cann(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHydro(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChange_parc(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setFouill_ponct(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setGenie_civi(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNego(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAccomp_free(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Solution entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Solution entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
