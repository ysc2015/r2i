package r2i.free.r2k.pointblqdao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import r2i.free.r2k.pointblqdao.db.Info;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFO".
*/
public class InfoDao extends AbstractDao<Info, Long> {

    public static final String TABLENAME = "INFO";

    /**
     * Properties of entity Info.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date_controle = new Property(1, java.util.Date.class, "date_controle", false, "DATE_CONTROLE");
        public final static Property User = new Property(2, String.class, "user", false, "USER");
        public final static Property Entreprise = new Property(3, String.class, "entreprise", false, "ENTREPRISE");
        public final static Property Respo = new Property(4, String.class, "respo", false, "RESPO");
        public final static Property Adr = new Property(5, String.class, "adr", false, "ADR");
        public final static Property Ref = new Property(6, String.class, "ref", false, "REF");
        public final static Property Nature_trvx = new Property(7, Integer.class, "nature_trvx", false, "NATURE_TRVX");
        public final static Property Enviro = new Property(8, Integer.class, "enviro", false, "ENVIRO");
    };


    public InfoDao(DaoConfig config) {
        super(config);
    }
    
    public InfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE_CONTROLE\" INTEGER," + // 1: date_controle
                "\"USER\" TEXT NOT NULL ," + // 2: user
                "\"ENTREPRISE\" TEXT," + // 3: entreprise
                "\"RESPO\" TEXT," + // 4: respo
                "\"ADR\" TEXT," + // 5: adr
                "\"REF\" TEXT," + // 6: ref
                "\"NATURE_TRVX\" INTEGER," + // 7: nature_trvx
                "\"ENVIRO\" INTEGER);"); // 8: enviro
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Info entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date_controle = entity.getDate_controle();
        if (date_controle != null) {
            stmt.bindLong(2, date_controle.getTime());
        }
        stmt.bindString(3, entity.getUser());
 
        String entreprise = entity.getEntreprise();
        if (entreprise != null) {
            stmt.bindString(4, entreprise);
        }
 
        String respo = entity.getRespo();
        if (respo != null) {
            stmt.bindString(5, respo);
        }
 
        String adr = entity.getAdr();
        if (adr != null) {
            stmt.bindString(6, adr);
        }
 
        String ref = entity.getRef();
        if (ref != null) {
            stmt.bindString(7, ref);
        }
 
        Integer nature_trvx = entity.getNature_trvx();
        if (nature_trvx != null) {
            stmt.bindLong(8, nature_trvx);
        }
 
        Integer enviro = entity.getEnviro();
        if (enviro != null) {
            stmt.bindLong(9, enviro);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Info readEntity(Cursor cursor, int offset) {
        Info entity = new Info( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date_controle
            cursor.getString(offset + 2), // user
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // entreprise
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // respo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ref
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // nature_trvx
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // enviro
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Info entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate_controle(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUser(cursor.getString(offset + 2));
        entity.setEntreprise(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRespo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRef(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNature_trvx(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEnviro(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Info entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Info entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
