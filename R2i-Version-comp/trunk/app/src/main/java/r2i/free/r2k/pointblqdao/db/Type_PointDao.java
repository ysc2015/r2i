package r2i.free.r2k.pointblqdao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import r2i.free.r2k.pointblqdao.db.Type_Point;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TYPE__POINT".
*/
public class Type_PointDao extends AbstractDao<Type_Point, Long> {

    public static final String TABLENAME = "TYPE__POINT";

    /**
     * Properties of entity Type_Point.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Res_aer = new Property(1, Integer.class, "res_aer", false, "RES_AER");
        public final static Property Conduit_sat = new Property(2, Integer.class, "conduit_sat", false, "CONDUIT_SAT");
        public final static Property Conduit_cass = new Property(3, Integer.class, "conduit_cass", false, "CONDUIT_CASS");
        public final static Property Tamp_chamb = new Property(4, Integer.class, "tamp_chamb", false, "TAMP_CHAMB");
        public final static Property Chamb_enrob = new Property(5, Integer.class, "chamb_enrob", false, "CHAMB_ENROB");
        public final static Property Res_priv = new Property(6, Integer.class, "res_priv", false, "RES_PRIV");
        public final static Property Chamb_inex = new Property(7, Integer.class, "chamb_inex", false, "CHAMB_INEX");
        public final static Property Problem_acce = new Property(8, Integer.class, "problem_acce", false, "PROBLEM_ACCE");
        public final static Property Autre = new Property(9, String.class, "autre", false, "AUTRE");
    };


    public Type_PointDao(DaoConfig config) {
        super(config);
    }
    
    public Type_PointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TYPE__POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RES_AER\" INTEGER," + // 1: res_aer
                "\"CONDUIT_SAT\" INTEGER," + // 2: conduit_sat
                "\"CONDUIT_CASS\" INTEGER," + // 3: conduit_cass
                "\"TAMP_CHAMB\" INTEGER," + // 4: tamp_chamb
                "\"CHAMB_ENROB\" INTEGER," + // 5: chamb_enrob
                "\"RES_PRIV\" INTEGER," + // 6: res_priv
                "\"CHAMB_INEX\" INTEGER," + // 7: chamb_inex
                "\"PROBLEM_ACCE\" INTEGER," + // 8: problem_acce
                "\"AUTRE\" TEXT);"); // 9: autre
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TYPE__POINT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Type_Point entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer res_aer = entity.getRes_aer();
        if (res_aer != null) {
            stmt.bindLong(2, res_aer);
        }
 
        Integer conduit_sat = entity.getConduit_sat();
        if (conduit_sat != null) {
            stmt.bindLong(3, conduit_sat);
        }
 
        Integer conduit_cass = entity.getConduit_cass();
        if (conduit_cass != null) {
            stmt.bindLong(4, conduit_cass);
        }
 
        Integer tamp_chamb = entity.getTamp_chamb();
        if (tamp_chamb != null) {
            stmt.bindLong(5, tamp_chamb);
        }
 
        Integer chamb_enrob = entity.getChamb_enrob();
        if (chamb_enrob != null) {
            stmt.bindLong(6, chamb_enrob);
        }
 
        Integer res_priv = entity.getRes_priv();
        if (res_priv != null) {
            stmt.bindLong(7, res_priv);
        }
 
        Integer chamb_inex = entity.getChamb_inex();
        if (chamb_inex != null) {
            stmt.bindLong(8, chamb_inex);
        }
 
        Integer problem_acce = entity.getProblem_acce();
        if (problem_acce != null) {
            stmt.bindLong(9, problem_acce);
        }
 
        String autre = entity.getAutre();
        if (autre != null) {
            stmt.bindString(10, autre);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Type_Point readEntity(Cursor cursor, int offset) {
        Type_Point entity = new Type_Point( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // res_aer
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // conduit_sat
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // conduit_cass
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // tamp_chamb
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // chamb_enrob
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // res_priv
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // chamb_inex
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // problem_acce
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // autre
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Type_Point entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRes_aer(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setConduit_sat(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setConduit_cass(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTamp_chamb(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setChamb_enrob(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRes_priv(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setChamb_inex(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setProblem_acce(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAutre(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Type_Point entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Type_Point entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
