package r2i.free.r2k.pointblqdao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import r2i.free.r2k.pointblqdao.db.Moyens;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOYENS".
*/
public class MoyensDao extends AbstractDao<Moyens, Long> {

    public static final String TABLENAME = "MOYENS";

    /**
     * Properties of entity Moyens.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Aigui_comp = new Property(1, Integer.class, "aigui_comp", false, "AIGUI_COMP");
        public final static Property Aigui_aiuill = new Property(2, Integer.class, "aigui_aiuill", false, "AIGUI_AIUILL");
        public final static Property Aigui_canne = new Property(3, Integer.class, "aigui_canne", false, "AIGUI_CANNE");
        public final static Property Hydro = new Property(4, Integer.class, "hydro", false, "HYDRO");
        public final static Property Id_pointblq = new Property(5, Integer.class, "id_pointblq", false, "ID_POINTBLQ");
        public final static Property Id_sonde = new Property(6, Integer.class, "id_sonde", false, "ID_SONDE");
        public final static Property Tenta_contact = new Property(7, Integer.class, "tenta_contact", false, "TENTA_CONTACT");
    };


    public MoyensDao(DaoConfig config) {
        super(config);
    }
    
    public MoyensDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOYENS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AIGUI_COMP\" INTEGER," + // 1: aigui_comp
                "\"AIGUI_AIUILL\" INTEGER," + // 2: aigui_aiuill
                "\"AIGUI_CANNE\" INTEGER," + // 3: aigui_canne
                "\"HYDRO\" INTEGER," + // 4: hydro
                "\"ID_POINTBLQ\" INTEGER," + // 5: id_pointblq
                "\"ID_SONDE\" INTEGER," + // 6: id_sonde
                "\"TENTA_CONTACT\" INTEGER);"); // 7: tenta_contact
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOYENS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Moyens entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer aigui_comp = entity.getAigui_comp();
        if (aigui_comp != null) {
            stmt.bindLong(2, aigui_comp);
        }
 
        Integer aigui_aiuill = entity.getAigui_aiuill();
        if (aigui_aiuill != null) {
            stmt.bindLong(3, aigui_aiuill);
        }
 
        Integer aigui_canne = entity.getAigui_canne();
        if (aigui_canne != null) {
            stmt.bindLong(4, aigui_canne);
        }
 
        Integer hydro = entity.getHydro();
        if (hydro != null) {
            stmt.bindLong(5, hydro);
        }
 
        Integer id_pointblq = entity.getId_pointblq();
        if (id_pointblq != null) {
            stmt.bindLong(6, id_pointblq);
        }
 
        Integer id_sonde = entity.getId_sonde();
        if (id_sonde != null) {
            stmt.bindLong(7, id_sonde);
        }
 
        Integer tenta_contact = entity.getTenta_contact();
        if (tenta_contact != null) {
            stmt.bindLong(8, tenta_contact);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Moyens readEntity(Cursor cursor, int offset) {
        Moyens entity = new Moyens( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // aigui_comp
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // aigui_aiuill
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // aigui_canne
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // hydro
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // id_pointblq
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // id_sonde
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // tenta_contact
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Moyens entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAigui_comp(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAigui_aiuill(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAigui_canne(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHydro(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setId_pointblq(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setId_sonde(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTenta_contact(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Moyens entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Moyens entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
